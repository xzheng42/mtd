// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dCondBiPois
double dCondBiPois(const int& uu, const int& vv, const double& th1, const double& th2, const double& th12);
RcppExport SEXP _mtd_dCondBiPois(SEXP uuSEXP, SEXP vvSEXP, SEXP th1SEXP, SEXP th2SEXP, SEXP th12SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type uu(uuSEXP);
    Rcpp::traits::input_parameter< const int& >::type vv(vvSEXP);
    Rcpp::traits::input_parameter< const double& >::type th1(th1SEXP);
    Rcpp::traits::input_parameter< const double& >::type th2(th2SEXP);
    Rcpp::traits::input_parameter< const double& >::type th12(th12SEXP);
    rcpp_result_gen = Rcpp::wrap(dCondBiPois(uu, vv, th1, th2, th12));
    return rcpp_result_gen;
END_RCPP
}
// pCondBiPois
double pCondBiPois(const int& uu, const int& vv, const double& th1, const double& th2, const double& th12);
RcppExport SEXP _mtd_pCondBiPois(SEXP uuSEXP, SEXP vvSEXP, SEXP th1SEXP, SEXP th2SEXP, SEXP th12SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type uu(uuSEXP);
    Rcpp::traits::input_parameter< const int& >::type vv(vvSEXP);
    Rcpp::traits::input_parameter< const double& >::type th1(th1SEXP);
    Rcpp::traits::input_parameter< const double& >::type th2(th2SEXP);
    Rcpp::traits::input_parameter< const double& >::type th12(th12SEXP);
    rcpp_result_gen = Rcpp::wrap(pCondBiPois(uu, vv, th1, th2, th12));
    return rcpp_result_gen;
END_RCPP
}
// pPMTD
double pPMTD(const int& obs, const arma::Col<int>& lags, const arma::colvec& weight, const double& la, const double& ga);
RcppExport SEXP _mtd_pPMTD(SEXP obsSEXP, SEXP lagsSEXP, SEXP weightSEXP, SEXP laSEXP, SEXP gaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type lags(lagsSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const double& >::type la(laSEXP);
    Rcpp::traits::input_parameter< const double& >::type ga(gaSEXP);
    rcpp_result_gen = Rcpp::wrap(pPMTD(obs, lags, weight, la, ga));
    return rcpp_result_gen;
END_RCPP
}
// rqrPMTD
arma::mat rqrPMTD(const arma::Col<int>& obs, const arma::mat& weight, const arma::colvec& la, const arma::colvec& ga);
RcppExport SEXP _mtd_rqrPMTD(SEXP obsSEXP, SEXP weightSEXP, SEXP laSEXP, SEXP gaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type la(laSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type ga(gaSEXP);
    rcpp_result_gen = Rcpp::wrap(rqrPMTD(obs, weight, la, ga));
    return rcpp_result_gen;
END_RCPP
}
// pLMTD
double pLMTD(const double& obs, const arma::colvec& lags, const arma::colvec& weight, const double& alpha, const double& phi);
RcppExport SEXP _mtd_pLMTD(SEXP obsSEXP, SEXP lagsSEXP, SEXP weightSEXP, SEXP alphaSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type lags(lagsSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(pLMTD(obs, lags, weight, alpha, phi));
    return rcpp_result_gen;
END_RCPP
}
// rqrRegLMTD
arma::mat rqrRegLMTD(const arma::colvec& obs, const arma::mat& xx, const arma::mat& weight, const arma::mat& bb, const arma::colvec& alpha, const arma::colvec& phi);
RcppExport SEXP _mtd_rqrRegLMTD(SEXP obsSEXP, SEXP xxSEXP, SEXP weightSEXP, SEXP bbSEXP, SEXP alphaSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type bb(bbSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(rqrRegLMTD(obs, xx, weight, bb, alpha, phi));
    return rcpp_result_gen;
END_RCPP
}
// updatePMTDut
arma::colvec updatePMTDut(const arma::colvec& ut, const arma::colvec& dat, const arma::colvec& dep_lag, const double& la, const double& ga);
RcppExport SEXP _mtd_updatePMTDut(SEXP utSEXP, SEXP datSEXP, SEXP dep_lagSEXP, SEXP laSEXP, SEXP gaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type ut(utSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type dat(datSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type dep_lag(dep_lagSEXP);
    Rcpp::traits::input_parameter< const double& >::type la(laSEXP);
    Rcpp::traits::input_parameter< const double& >::type ga(gaSEXP);
    rcpp_result_gen = Rcpp::wrap(updatePMTDut(ut, dat, dep_lag, la, ga));
    return rcpp_result_gen;
END_RCPP
}
// updateNBMTDut
arma::colvec updateNBMTDut(const arma::colvec& ut, const arma::colvec& dat, const arma::colvec& dep_lag, const double& th, const double& alp, const double& kap);
RcppExport SEXP _mtd_updateNBMTDut(SEXP utSEXP, SEXP datSEXP, SEXP dep_lagSEXP, SEXP thSEXP, SEXP alpSEXP, SEXP kapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type ut(utSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type dat(datSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type dep_lag(dep_lagSEXP);
    Rcpp::traits::input_parameter< const double& >::type th(thSEXP);
    Rcpp::traits::input_parameter< const double& >::type alp(alpSEXP);
    Rcpp::traits::input_parameter< const double& >::type kap(kapSEXP);
    rcpp_result_gen = Rcpp::wrap(updateNBMTDut(ut, dat, dep_lag, th, alp, kap));
    return rcpp_result_gen;
END_RCPP
}
// updateGMTDlabel
List updateGMTDlabel(const arma::colvec& data, const arma::mat& lags, const int& mtdorder, const arma::colvec& weight, const arma::colvec& mu, const arma::colvec& sigma2, const arma::colvec& rho);
RcppExport SEXP _mtd_updateGMTDlabel(SEXP dataSEXP, SEXP lagsSEXP, SEXP mtdorderSEXP, SEXP weightSEXP, SEXP muSEXP, SEXP sigma2SEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lags(lagsSEXP);
    Rcpp::traits::input_parameter< const int& >::type mtdorder(mtdorderSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(updateGMTDlabel(data, lags, mtdorder, weight, mu, sigma2, rho));
    return rcpp_result_gen;
END_RCPP
}
// updatePMTDlabel
List updatePMTDlabel(const arma::colvec& data, const arma::mat& lags, const int& mtdorder, const arma::colvec& weight, const double& th, const arma::colvec& ut);
RcppExport SEXP _mtd_updatePMTDlabel(SEXP dataSEXP, SEXP lagsSEXP, SEXP mtdorderSEXP, SEXP weightSEXP, SEXP thSEXP, SEXP utSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lags(lagsSEXP);
    Rcpp::traits::input_parameter< const int& >::type mtdorder(mtdorderSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const double& >::type th(thSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type ut(utSEXP);
    rcpp_result_gen = Rcpp::wrap(updatePMTDlabel(data, lags, mtdorder, weight, th, ut));
    return rcpp_result_gen;
END_RCPP
}
// updateNBMTDlabel
List updateNBMTDlabel(const arma::colvec& data, const arma::mat& lags, const int& mtdorder, const arma::colvec& weight, const double& th, const arma::colvec& ut, const double& alp, const double& kap);
RcppExport SEXP _mtd_updateNBMTDlabel(SEXP dataSEXP, SEXP lagsSEXP, SEXP mtdorderSEXP, SEXP weightSEXP, SEXP thSEXP, SEXP utSEXP, SEXP alpSEXP, SEXP kapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lags(lagsSEXP);
    Rcpp::traits::input_parameter< const int& >::type mtdorder(mtdorderSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const double& >::type th(thSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type ut(utSEXP);
    Rcpp::traits::input_parameter< const double& >::type alp(alpSEXP);
    Rcpp::traits::input_parameter< const double& >::type kap(kapSEXP);
    rcpp_result_gen = Rcpp::wrap(updateNBMTDlabel(data, lags, mtdorder, weight, th, ut, alp, kap));
    return rcpp_result_gen;
END_RCPP
}
// updateLMTDlabel
List updateLMTDlabel(const arma::colvec& data, const arma::mat& lags, const int& mtdorder, const arma::colvec& weight, const arma::colvec& alpha, const arma::colvec& phi);
RcppExport SEXP _mtd_updateLMTDlabel(SEXP dataSEXP, SEXP lagsSEXP, SEXP mtdorderSEXP, SEXP weightSEXP, SEXP alphaSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lags(lagsSEXP);
    Rcpp::traits::input_parameter< const int& >::type mtdorder(mtdorderSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(updateLMTDlabel(data, lags, mtdorder, weight, alpha, phi));
    return rcpp_result_gen;
END_RCPP
}
// predPMTD
arma::mat predPMTD(const int& mtdorder, const arma::mat& weight, const arma::mat& lags, const arma::colvec& la, const arma::colvec& th, const arma::colvec& probs);
RcppExport SEXP _mtd_predPMTD(SEXP mtdorderSEXP, SEXP weightSEXP, SEXP lagsSEXP, SEXP laSEXP, SEXP thSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type mtdorder(mtdorderSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lags(lagsSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type la(laSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type th(thSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(predPMTD(mtdorder, weight, lags, la, th, probs));
    return rcpp_result_gen;
END_RCPP
}
// predNBMTD
arma::mat predNBMTD(const int& mtdorder, const arma::mat& weight, const arma::mat& lags, const arma::colvec& th, const arma::colvec& psi, const arma::colvec& kap, const arma::colvec& probs);
RcppExport SEXP _mtd_predNBMTD(SEXP mtdorderSEXP, SEXP weightSEXP, SEXP lagsSEXP, SEXP thSEXP, SEXP psiSEXP, SEXP kapSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type mtdorder(mtdorderSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lags(lagsSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type th(thSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type kap(kapSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(predNBMTD(mtdorder, weight, lags, th, psi, kap, probs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mtd_dCondBiPois", (DL_FUNC) &_mtd_dCondBiPois, 5},
    {"_mtd_pCondBiPois", (DL_FUNC) &_mtd_pCondBiPois, 5},
    {"_mtd_pPMTD", (DL_FUNC) &_mtd_pPMTD, 5},
    {"_mtd_rqrPMTD", (DL_FUNC) &_mtd_rqrPMTD, 4},
    {"_mtd_pLMTD", (DL_FUNC) &_mtd_pLMTD, 5},
    {"_mtd_rqrRegLMTD", (DL_FUNC) &_mtd_rqrRegLMTD, 6},
    {"_mtd_updatePMTDut", (DL_FUNC) &_mtd_updatePMTDut, 5},
    {"_mtd_updateNBMTDut", (DL_FUNC) &_mtd_updateNBMTDut, 6},
    {"_mtd_updateGMTDlabel", (DL_FUNC) &_mtd_updateGMTDlabel, 7},
    {"_mtd_updatePMTDlabel", (DL_FUNC) &_mtd_updatePMTDlabel, 6},
    {"_mtd_updateNBMTDlabel", (DL_FUNC) &_mtd_updateNBMTDlabel, 8},
    {"_mtd_updateLMTDlabel", (DL_FUNC) &_mtd_updateLMTDlabel, 6},
    {"_mtd_predPMTD", (DL_FUNC) &_mtd_predPMTD, 6},
    {"_mtd_predNBMTD", (DL_FUNC) &_mtd_predNBMTD, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_mtd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
